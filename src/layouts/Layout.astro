---
interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;

import "@fontsource/dm-serif-display";
import "@fontsource-variable/red-hat-display";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <img src="/blurCorner.png" aria-hidden="true" class="blurCorner" />
    <canvas id="stars"></canvas>
    <div class="bottom">
      <h1>{title}</h1>
      <p>{description}</p>
    </div>
    <slot />
  </body>
</html>
<script>
  //@ts-nocheck
  const canvas = document.getElementById("stars")! as HTMLCanvasElement;
  const ctx = canvas.getContext("2d");
  const slider = document.querySelector(".slider input")! as HTMLInputElement;

  let screen = {};
  let stars = [];
  let params = { speed: 2, number: 300, extinction: 4 };

  setupStars();
  updateStars();

  slider.oninput = function () {
    params.speed = this.value;
  };

  // update stars on resize to keep the thing centered
  window.onresize = function () {
    setupStars();
  };

  // star constructor
  function Star() {
    this.x = Math.random() * canvas.width;
    this.y = Math.random() * canvas.height;
    this.z = Math.random() * canvas.width;

    this.move = function () {
      this.z -= params.speed;
      if (this.z <= 0) {
        this.z = canvas.width;
      }
    };

    this.show = function () {
      let x, y, rad, opacity;
      x = (this.x - screen.c[0]) * (canvas.width / this.z);
      x = x + screen.c[0];
      y = (this.y - screen.c[1]) * (canvas.width / this.z);
      y = y + screen.c[1];
      rad = canvas.width / this.z;
      opacity =
        rad > params.extinction ? 1.5 * (2 - rad / params.extinction) : 1;

      ctx.beginPath();
      ctx.fillStyle = "rgba(255, 255, 255, " + opacity + ")";
      ctx.arc(x, y, rad, 0, Math.PI * 2);
      ctx.fill();
    };
  }

  // setup <canvas>, create all the starts
  function setupStars() {
    screen = {
      w: window.innerWidth,
      h: window.innerHeight,
      c: [window.innerWidth * 0.5, window.innerHeight * 0.5],
    };
    window.cancelAnimationFrame(updateStars);
    canvas.width = screen.w;
    canvas.height = screen.h;
    stars = [];
    for (let i = 0; i < params.number; i++) {
      stars[i] = new Star();
    }
  }

  function updateStars() {
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    stars.forEach(function (s) {
      s.show();
      s.move();
    });
    window.requestAnimationFrame(updateStars);
  }
</script>
<style>
  #stars {
    position: absolute;
    z-index: -2;
    bottom: 0;
    right: 0;
    width: 100vw;
    height: 100vh;
  }
  .blurCorner {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: top left;
    pointer-events: none;
  }
  .bottom {
    position: absolute;
    bottom: 0;
    left: 0;
    margin: 0 4rem;
    display: flex;
    width: calc(100% - 8rem);
    align-items: last baseline;
    justify-content: space-between;
    text-align: center;
  }
  .bottom > h1 {
    color: #fff;
    font-size: 5rem;
    width: 3rem;
    font-family: "DM Serif Display", sans-serif;
    font-weight: 400;
    line-height: normal;
  }
  .bottom > p {
    color: #fff;
    font-size: 1.5rem;
    font-style: normal;
    font-weight: 400;
    line-height: normal;
    margin: 0;
    font-family: "Red Hat Display Variable", sans-serif;
  }
</style>
<style is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }
  html {
    font-family: system-ui, sans-serif;
    background: #0b0c0e;
    background-size: 224px;
    padding: 0;
    margin: 0;
  }
  body {
    margin: 0;
    padding: 0;
  }
  code {
    font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
      DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
  }
</style>
