---
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;

import "@fontsource/dm-serif-display";
import "@fontsource-variable/red-hat-display";
import Sidenav from "../components/Sidenav.astro";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <!-- <ViewTransitions /> -->
  </head>
  <body>
    <img src="/blurCorner.png" aria-hidden="true" class="blurCorner" />
    <canvas id="stars"></canvas>
    <div class="bottom">
      <h1 id="title">{title}</h1>
      <p id="description">{description}</p>
    </div>
    <slot />
    <Sidenav />
    <script>
      //@ts-nocheck
      const canvas = document.getElementById("stars")! as HTMLCanvasElement;
      const ctx = canvas.getContext("2d");

      let screen = {};
      let stars = [];
      let params = { speed: 2, number: 300, extinction: 4 };

      setupStars();
      updateStars();

      // update stars on resize to keep the thing centered
      window.onresize = function () {
        setupStars();
      };

      // star constructor
      function Star() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.z = Math.random() * canvas.width;

        this.move = function () {
          this.z -= params.speed;
          if (this.z <= 0) {
            this.z = canvas.width;
          }
        };

        this.show = function () {
          let x, y, rad, opacity;
          x = (this.x - screen.c[0]) * (canvas.width / this.z);
          x = x + screen.c[0];
          y = (this.y - screen.c[1]) * (canvas.width / this.z);
          y = y + screen.c[1];
          rad = canvas.width / this.z;
          opacity =
            rad > params.extinction ? 1.5 * (2 - rad / params.extinction) : 1;

          ctx.beginPath();
          ctx.fillStyle = "rgba(255, 255, 255, " + opacity + ")";
          ctx.arc(x, y, rad, 0, Math.PI * 2);
          ctx.fill();
        };
      }

      // setup <canvas>, create all the starts
      function setupStars() {
        screen = {
          w: window.innerWidth,
          h: window.innerHeight,
          c: [window.innerWidth * 0.5, window.innerHeight * 0.5],
        };
        window.cancelAnimationFrame(updateStars);
        canvas.width = screen.w;
        canvas.height = screen.h;
        stars = [];
        for (let i = 0; i < params.number; i++) {
          stars[i] = new Star();
        }
      }

      function updateStars() {
        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        stars.forEach(function (s) {
          s.show();
          s.move();
        });
        window.requestAnimationFrame(updateStars);
      }
    </script>
    <script>
      import anime from "animejs";
      import { breakApart } from "../utils";

      breakApart("letters", "#title", false, 1000).play();
      breakApart("letters", "#description", false, 2000).play();
    </script>
    <style>
      #stars {
        position: absolute;
        z-index: -2;
        bottom: 0;
        right: 0;
        width: 100vw;
        height: 100vh;
      }
      .blurCorner {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: top left;
        pointer-events: none;
      }
      .bottom {
        position: absolute;
        bottom: 0;
        left: 0;
        margin: 0 4rem;
        display: flex;
        width: calc(100% - 8rem);
        align-items: last baseline;
        justify-content: space-between;
        text-align: center;
      }
      .bottom > h1 {
        color: #fff;
        font-size: 5rem;
        width: 3rem;
        font-family: "DM Serif Display", sans-serif;
        font-weight: 400;
        line-height: normal;
        perspective: 4000px;
      }
      .bottom > p {
        color: #fff;
        font-size: 1.5rem;
        font-style: normal;
        font-weight: 400;
        line-height: normal;
        margin: 0;
        font-family: "Red Hat Display Variable", sans-serif;
      }
    </style>
    <style is:global>
      :root {
        --accent-gradient: linear-gradient(
          99.9deg,
          rgb(14, 14, 17) 41.2%,
          rgb(5, 4, 89) 84.8%
        );
      }
      .blue-to-black {
        background-image: linear-gradient(
          to right in oklch,
          rgb(14, 14, 17) 41.2%,
          rgb(5, 4, 89) 84.8%
        );
      }
      html {
        font-family: system-ui, sans-serif;
        background: #0b0c0e;
        background-size: 224px;
        padding: 0;
        margin: 0;
      }
      body {
        margin: 0;
        padding: 0;
      }
      code {
        font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
          DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
      }
      .hover-underline-animation {
        display: inline-block;
        position: relative;
        color: #0087ca;
      }

      .hover-underline-animation::after {
        content: "";
        position: absolute;
        width: 100%;
        transform: scaleX(0);
        height: 2px;
        bottom: 0;
        left: 0;
        background-color: #f5f5f5;
        transform-origin: bottom right;
        transition: transform 0.25s ease-out;
      }

      .hover-underline-animation:hover::after {
        transform: scaleX(1);
        transform-origin: bottom left;
      }
    </style>
  </body>
</html>
